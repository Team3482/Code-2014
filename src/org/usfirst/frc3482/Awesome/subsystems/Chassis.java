// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3482.Awesome.subsystems;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.*;
import org.usfirst.frc3482.Awesome.RobotMap;
import org.usfirst.frc3482.Awesome.commands.*;


/**
 *
 */
public class Chassis extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController driveFrontRight = RobotMap.chassisDriveFrontRight;
    SpeedController driveFrontLeft = RobotMap.chassisDriveFrontLeft;
    SpeedController driveBackRight = RobotMap.chassisDriveBackRight;
    SpeedController driveBackLeft = RobotMap.chassisDriveBackLeft;
    RobotDrive robotDrive41 = RobotMap.chassisRobotDrive41;
    RobotDrive robotDrive = RobotMap.chassisRobotDrive;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new Drive());
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    public void drive(Joystick s){

        double deadZone = .05;
        double xAxis = s.getAxis(Joystick.AxisType.kX);
        double yAxis = s.getAxis(Joystick.AxisType.kY);
        
        // X sensitivity set by slider, Y sensitivity set by knob
        double slider = SmartDashboard.getNumber("Slider 1");
        xAxis *= (slider/100);
        double knob = s.getAxis(Joystick.AxisType.kZ);
        knob = 1 - (knob/2);    // Format input from Z Axis
        yAxis *= knob;
        // If the X or Y axes are in the deadzone, flip them to zero.
        if (xAxis < deadZone && xAxis > -deadZone) {
            xAxis = 0;
        }
        if (yAxis < deadZone && yAxis > -deadZone) {
            yAxis = 0;
    }
        robotDrive.arcadeDrive(xAxis, yAxis);
    }
}

